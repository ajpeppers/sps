//slidepuzzle.cpp
//A.J. Peppers
//ajp4hrw
//4-29-22
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <sstream>
#include <limits>
using namespace std;
int minDist= numeric_limits<int>::max();
vector<int**> generateNeighbors(int** table);


int main(int argc, char** argv){
  int** table = new int*[3];
  for(int i=0; i<3; i++){
    table[i] = new int[3];
    for(int j = 0; j < 3; j++){
      table[i][j] = 0;
    }
  }
  cout << Enter puzzle << endl;
  for(int i = 0; i<3; i++){
    string line = "";
    cin >> line;
    stringstream ss(line);
    string intermediate;
    int j = 0;
    while(getline(ss, intermediate, ' ')){
      table[i][j] = (int)intermediate;
      j++;
    }
  }
  
}
vector<int**> generateNeighbors(int** table){
  vector<int**> tables;
  for(int i = 0; i<3; i++){
    for(int j=0; j<3; j++){
      if(table[i][j] == 0){
	if(i>0){
	  int** dup = table;
	  table[i][j] = table[i-1][j];
	  table[i-1][j] = 0;
	  tables.push_back(dup);
	}
	if(i<2){
	  int** dup = table;
	  table[i][j] = table[i+1][j];
	  table[i+1][j] = 0;
	  tables.push_back(dup);
	}
	if(j>0){
	  int** dup = table;
	  table[i][j] = table[i][j-1];
	  table[i][j-1] = 0;
	  tables.push_back(dup);
	}
	if(j<2){
	  int** dup = table;
	  table[i][j] = table[i][j+1];
	  table[i][j+1] = 0;
	  tables.push_back(dup);
	}
	i=3;
	j=3;
      }
    }
  }
  return tables;
}
